{"ast":null,"code":"let role;\nlet idArray = [];\nlet tableListRimborso = [];\nexport function mockLink() {\n  return 'https://638a2950c5356b25a2141671.mockapi.io/';\n}\nexport function mockLinkUser(userId) {\n  return 'https://638a2950c5356b25a2141671.mockapi.io/users/' + userId;\n}\nexport function mockLinkSpesa(userId) {\n  return 'https://638a2950c5356b25a2141671.mockapi.io/users/' + userId + '/spesa';\n}\nexport async function getRole(username) {\n  console.log(\"%c ___ \", \"background-color:orange;\");\n  await fetch(mockLinkUser(username), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => {\n    role = data.role;\n    console.log(role);\n  }).catch(error => console.log(error));\n  return role;\n}\nexport async function storageRimborsoMax(role) {\n  const maxRefundable = {};\n  await fetch(mockLink() + \"maxRefundable\").then(response => response.json()).then(data => {\n    for (const key in data) {\n      if (data[key].ruolo == role) {\n        maxRefundable.taxi = data[key].taxi;\n        maxRefundable.vitto = data[key].vitto;\n        maxRefundable.hotel = data[key].hotel;\n        maxRefundable.treno = data[key].treno;\n      }\n    }\n  }).catch(error => console.log(error));\n  console.log(maxRefundable);\n  return maxRefundable;\n}\nexport async function downloadTable(userId, month) {\n  console.log(\"%c DOWNLOADING \", \"background-color:DeepPink;color:white;font-size:16px;\");\n  let refundList = [];\n  await fetch(mockLinkSpesa(userId), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => jsonToArray(data, month, refundList)).catch(error => console.log(error));\n  console.log(refundList);\n  return refundList;\n  // sortByColumn(columnSort, tableListRimborso);\n  // resetTable();\n  // writeCreateTable(tableListRimborso);\n  // undisableForm();\n}\n\nexport function jsonToArray(obj, month, refundList) {\n  obj.map(value => {\n    Object.keys(value).map(item => {\n      if (item != \"id\" && item != \"userId\") {\n        let tableDate = value[item].dateRefund.match('[0-9]{4}[-][0-9]{2}');\n        if (month == tableDate) {\n          // value[item].primaryKey = primaryKey++;\n          refundList.push(value[item]);\n        }\n      }\n    });\n  });\n}\nexport async function submitMonthMock(rows, userId, yearMonth) {\n  console.log(\"%c SUBMIT IS STARTING \", \"background-color:brown;color:white;font-size:16px;\");\n  idArray = await getIdByMonthMock(userId, yearMonth);\n  await deleteMockByUserId(idArray, userId);\n  idArray = [];\n  await postTable(rows, userId);\n}\nexport async function getIdByMonthMock(userId, yearMonth) {\n  console.log(\"%c GETTING primaryKey \", \"background-color:red;color:white;font-size:16px;\");\n  await fetch(mockLinkSpesa(userId), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => idMonthSelected(data, yearMonth)).catch(error => console.log(error));\n  console.log(\"id TO DELETE : \");\n  console.log(idArray);\n  return idArray;\n}\nexport async function idMonthSelected(obj, yearMonth) {\n  console.log(yearMonth);\n  obj.filter(value => {\n    let tableDate = value[0].dateRefund.match('[0-9]{4}[-][0-9]{2}');\n    if (tableDate == yearMonth) {\n      idArray.push(value.id);\n    }\n  });\n}\nexport async function deleteMockByUserId(idArray, userId) {\n  console.log(\"%c DELETING \", \"background-color:black;color:white;font-size:16px;\");\n  for (const element of idArray) {\n    await fetch(mockLinkSpesa(userId) + '/' + element, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => console.log(data));\n  }\n}\nexport async function postTable(rows, userId) {\n  let tableIsEmpty = rows.length == 0;\n  if (!tableIsEmpty) {\n    console.log(\"%c POSTING \", \"background-color:white;color:black;font-size:16px;\");\n    await fetch(mockLinkSpesa(userId), {\n      method: \"POST\",\n      body: JSON.stringify(rows),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(\"NUOVO primaryKey \" + data.id);\n    }).catch(error => console.log(error));\n  } else {\n    console.log(\"%c tableIsEmpty\", \"font-size:16px;\");\n  }\n  console.log(\"%c SUBMITTING ENDED \", \"background-color:brown;color:white;font-size:16px;\");\n}","map":{"version":3,"names":["role","idArray","tableListRimborso","mockLink","mockLinkUser","userId","mockLinkSpesa","getRole","username","console","log","fetch","method","headers","then","response","json","data","catch","error","storageRimborsoMax","maxRefundable","key","ruolo","taxi","vitto","hotel","treno","downloadTable","month","refundList","jsonToArray","obj","map","value","Object","keys","item","tableDate","dateRefund","match","push","submitMonthMock","rows","yearMonth","getIdByMonthMock","deleteMockByUserId","postTable","idMonthSelected","filter","id","element","tableIsEmpty","length","body","JSON","stringify"],"sources":["C:/Users/ls96/Desktop/Programming/Stage/2 parte/rimborso-spese/src/API/fetchFunc.js"],"sourcesContent":["let role;\r\nlet idArray = [];\r\nlet tableListRimborso = [];\r\n\r\nexport function mockLink() {\r\n    return 'https://638a2950c5356b25a2141671.mockapi.io/'\r\n}\r\nexport function mockLinkUser(userId) {\r\n    return 'https://638a2950c5356b25a2141671.mockapi.io/users/' + userId;\r\n}\r\nexport function mockLinkSpesa(userId) {\r\n    return 'https://638a2950c5356b25a2141671.mockapi.io/users/' + userId + '/spesa';\r\n}\r\n\r\n\r\nexport async function getRole(username) {\r\n    console.log(\"%c ___ \",\"background-color:orange;\");\r\n    await fetch(mockLinkUser(username),{\r\n        method: \"GET\",\r\n        headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {role = data.role; console.log(role)})\r\n    .catch(error => console.log(error));\r\n    return role;\r\n}\r\n\r\nexport async function storageRimborsoMax(role) {\r\n    const maxRefundable = {};\r\n    await fetch(mockLink() + \"maxRefundable\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        for (const key in data) {\r\n            if (data[key].ruolo == role) {\r\n                maxRefundable.taxi = data[key].taxi\r\n                maxRefundable.vitto = data[key].vitto\r\n                maxRefundable.hotel = data[key].hotel\r\n                maxRefundable.treno = data[key].treno\r\n            }\r\n        }})\r\n    .catch(error => console.log(error));\r\n    console.log(maxRefundable)\r\n    return maxRefundable;\r\n}\r\n\r\nexport async function downloadTable(userId, month) {\r\n    console.log(\"%c DOWNLOADING \",\"background-color:DeepPink;color:white;font-size:16px;\")\r\n    let refundList = [];\r\n    await fetch(mockLinkSpesa(userId),{\r\n        method: \"GET\",\r\n        headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => jsonToArray(data, month, refundList))\r\n    .catch(error => console.log(error));\r\n\r\n    console.log(refundList)\r\n    return refundList;\r\n    // sortByColumn(columnSort, tableListRimborso);\r\n    // resetTable();\r\n    // writeCreateTable(tableListRimborso);\r\n    // undisableForm();\r\n}\r\n\r\nexport function jsonToArray(obj, month, refundList) {\r\n    obj.map(value => {\r\n        Object.keys(value).map(item => {\r\n            if (item != \"id\" && item != \"userId\") {\r\n                let tableDate = value[item].dateRefund.match('[0-9]{4}[-][0-9]{2}');\r\n                if (month == tableDate) {\r\n                    // value[item].primaryKey = primaryKey++;\r\n                    refundList.push(value[item]);\r\n                }    \r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport async function submitMonthMock(rows, userId, yearMonth) {\r\n    console.log(\"%c SUBMIT IS STARTING \",\"background-color:brown;color:white;font-size:16px;\")\r\n    idArray = await getIdByMonthMock(userId, yearMonth);\r\n    await deleteMockByUserId(idArray, userId)\r\n    idArray = [];\r\n    await postTable(rows, userId);\r\n}\r\n\r\nexport async function getIdByMonthMock(userId, yearMonth) {\r\n    console.log(\"%c GETTING primaryKey \",\"background-color:red;color:white;font-size:16px;\")\r\n\r\n    await fetch(mockLinkSpesa(userId),{\r\n        method: \"GET\",\r\n        headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => idMonthSelected(data, yearMonth))\r\n    .catch(error => console.log(error));\r\n    console.log(\"id TO DELETE : \")\r\n    console.log(idArray)\r\n    return idArray;\r\n}\r\n\r\nexport async function idMonthSelected(obj, yearMonth) {\r\n    console.log(yearMonth)\r\n    obj.filter(value => {\r\n        let tableDate = value[0].dateRefund.match('[0-9]{4}[-][0-9]{2}');\r\n        if (tableDate == yearMonth) {\r\n            idArray.push(value.id)\r\n        }\r\n    })\r\n}\r\n\r\nexport async function deleteMockByUserId(idArray, userId) {\r\n    console.log(\"%c DELETING \",\"background-color:black;color:white;font-size:16px;\")\r\n    for (const element of idArray) {\r\n        await fetch(mockLinkSpesa(userId) + '/' + element, {\r\n        method: \"DELETE\",\r\n        headers: {\"Content-type\": \"application/json\"}\r\n      })\r\n    .then(response => { return response.json()})\r\n    .then(data => console.log(data) );\r\n    }\r\n}\r\n\r\nexport async function postTable(rows, userId) {\r\n    let tableIsEmpty = (rows.length == 0)\r\n    if(!tableIsEmpty) {\r\n        console.log(\"%c POSTING \",\"background-color:white;color:black;font-size:16px;\")\r\n        await fetch(mockLinkSpesa(userId),{\r\n            method: \"POST\",\r\n            body: JSON.stringify(rows),\r\n            headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {console.log(data); console.log(\"NUOVO primaryKey \" + data.id)})\r\n        .catch(error => console.log(error));\r\n    } else {\r\n        console.log(\"%c tableIsEmpty\",\"font-size:16px;\")\r\n    }\r\n    console.log(\"%c SUBMITTING ENDED \",\"background-color:brown;color:white;font-size:16px;\") \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}