{"ast":null,"code":"let role;\nlet idArray = [];\nlet foundAccount = {};\nexport function mockLink() {\n  return \"https://638a2950c5356b25a2141671.mockapi.io/\";\n}\nexport function mockLinkUser(userId) {\n  return \"https://638a2950c5356b25a2141671.mockapi.io/users/\" + userId;\n}\nexport function mockLinkSpesa(userId) {\n  return \"https://638a2950c5356b25a2141671.mockapi.io/users/\" + userId + \"/spesa\";\n}\nexport async function getRole(username) {\n  console.log(\"%c ___ \", \"background-color:orange;\");\n  await fetch(mockLinkUser(username), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => {\n    role = data.role;\n  }).catch(error => console.log(error));\n  return role;\n}\nexport async function storageRimborsoMax(role) {\n  const maxRefundable = {};\n  await fetch(mockLink() + \"maxRefundable\").then(response => response.json()).then(data => {\n    for (const key in data) {\n      if (data[key].ruolo == role) {\n        maxRefundable.taxi = data[key].taxi;\n        maxRefundable.vitto = data[key].vitto;\n        maxRefundable.hotel = data[key].hotel;\n        maxRefundable.treno = data[key].treno;\n      }\n    }\n  }).catch(error => console.log(error));\n  console.log(maxRefundable);\n  return maxRefundable;\n}\nexport async function downloadTable(userId, month) {\n  console.log(\"%c DOWNLOADING \", \"background-color:DeepPink;color:white;font-size:16px;\");\n  let refundList = [];\n  await fetch(mockLinkSpesa(userId), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => jsonToArray(data, month, refundList)).catch(error => console.log(error));\n  return refundList;\n  // sortByColumn(columnSort, tableListRimborso);\n  // resetTable();\n  // writeCreateTable(tableListRimborso);\n  // undisableForm();\n}\n\nexport function jsonToArray(obj, month, refundList) {\n  obj.map(value => {\n    Object.keys(value).map(item => {\n      if (item != \"id\" && item != \"userId\") {\n        let tableDate = value[item].dateRefund.match(\"[0-9]{4}[-][0-9]{2}\");\n        if (month == tableDate) {\n          // value[item].primaryKey = primaryKey++;\n          refundList.push(value[item]);\n        }\n      }\n    });\n  });\n}\nexport async function submitMonthMock(rows, userId, yearMonth) {\n  console.log(\"%c SUBMIT IS STARTING \", \"background-color:brown;color:white;font-size:16px;\");\n  idArray = await getIdByMonthMock(userId, yearMonth);\n  await deleteMockByUserId(idArray, userId);\n  idArray = [];\n  await postTable(rows, userId);\n}\nexport async function getIdByMonthMock(userId, yearMonth) {\n  console.log(\"%c GETTING ID \", \"background-color:red;color:white;font-size:16px;\");\n  await fetch(mockLinkSpesa(userId), {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => idMonthSelected(data, yearMonth)).catch(error => console.log(error));\n  console.log(\"id TO DELETE : \");\n  console.log(idArray);\n  return idArray;\n}\nfunction idMonthSelected(obj, yearMonth) {\n  console.log(yearMonth);\n  obj.filter(value => {\n    let tableDate = value[0].dateRefund.match(\"[0-9]{4}[-][0-9]{2}\");\n    if (tableDate == yearMonth) {\n      idArray.push(value.id);\n    }\n  });\n}\nexport async function deleteMockByUserId(idArray, userId) {\n  console.log(\"%c DELETING \", \"background-color:black;color:white;font-size:16px;\");\n  for (const element of idArray) {\n    await fetch(mockLinkSpesa(userId) + \"/\" + element, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => console.log(data));\n  }\n}\nexport async function postTable(rows, userId) {\n  let tableIsEmpty = rows.length == 0;\n  if (!tableIsEmpty) {\n    console.log(\"%c POSTING \", \"background-color:white;color:black;font-size:16px;\");\n    await fetch(mockLinkSpesa(userId), {\n      method: \"POST\",\n      body: JSON.stringify(rows),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(\"NUOVO id \" + data.id);\n    }).catch(error => console.log(error));\n  } else {\n    console.log(\"%c tableIsEmpty\", \"font-size:16px;\");\n  }\n  console.log(\"%c SUBMITTING ENDED \", \"background-color:brown;color:white;font-size:16px;\");\n}\nexport async function hasRegistered(user) {\n  foundAccount = {\n    found: false,\n    id: \"\"\n  };\n  await fetch(mockLink() + \"users\", {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => checkId(data, user)).catch(error => console.log(error));\n  return foundAccount;\n}\nfunction checkId(data, user) {\n  data.map(mock => {\n    if (mock.username === user.username && mock.password === user.password) {\n      foundAccount.found = true;\n      foundAccount.id = mock.id;\n    }\n  });\n}\nexport async function registerNewUser(userData) {\n  console.log(\"%c REGISTERING \", \"background-color:grey;color:white;font-size:16px;\");\n  await fetch(mockLink() + \"users\", {\n    method: \"POST\",\n    body: JSON.stringify(userData),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    console.log(\"NUOVO id \" + data.id);\n  }).catch(error => console.log(error));\n}","map":{"version":3,"names":["role","idArray","foundAccount","mockLink","mockLinkUser","userId","mockLinkSpesa","getRole","username","console","log","fetch","method","headers","then","response","json","data","catch","error","storageRimborsoMax","maxRefundable","key","ruolo","taxi","vitto","hotel","treno","downloadTable","month","refundList","jsonToArray","obj","map","value","Object","keys","item","tableDate","dateRefund","match","push","submitMonthMock","rows","yearMonth","getIdByMonthMock","deleteMockByUserId","postTable","idMonthSelected","filter","id","element","tableIsEmpty","length","body","JSON","stringify","hasRegistered","user","found","checkId","mock","password","registerNewUser","userData"],"sources":["C:/Users/ls96/Desktop/Programming/Stage/2 parte/rimborso-spese/src/API/fetchFunc.js"],"sourcesContent":["let role;\r\nlet idArray = [];\r\nlet foundAccount = {};\r\n\r\nexport function mockLink() {\r\n\treturn \"https://638a2950c5356b25a2141671.mockapi.io/\";\r\n}\r\nexport function mockLinkUser(userId) {\r\n\treturn \"https://638a2950c5356b25a2141671.mockapi.io/users/\" + userId;\r\n}\r\nexport function mockLinkSpesa(userId) {\r\n\treturn \"https://638a2950c5356b25a2141671.mockapi.io/users/\" + userId + \"/spesa\";\r\n}\r\n\r\nexport async function getRole(username) {\r\n\tconsole.log(\"%c ___ \", \"background-color:orange;\");\r\n\tawait fetch(mockLinkUser(username), {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t})\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\trole = data.role;\r\n\t\t})\r\n\t\t.catch((error) => console.log(error));\r\n\treturn role;\r\n}\r\n\r\nexport async function storageRimborsoMax(role) {\r\n\tconst maxRefundable = {};\r\n\tawait fetch(mockLink() + \"maxRefundable\")\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\tfor (const key in data) {\r\n\t\t\t\tif (data[key].ruolo == role) {\r\n\t\t\t\t\tmaxRefundable.taxi = data[key].taxi;\r\n\t\t\t\t\tmaxRefundable.vitto = data[key].vitto;\r\n\t\t\t\t\tmaxRefundable.hotel = data[key].hotel;\r\n\t\t\t\t\tmaxRefundable.treno = data[key].treno;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => console.log(error));\r\n\tconsole.log(maxRefundable);\r\n\treturn maxRefundable;\r\n}\r\n\r\nexport async function downloadTable(userId, month) {\r\n\tconsole.log(\"%c DOWNLOADING \", \"background-color:DeepPink;color:white;font-size:16px;\");\r\n\tlet refundList = [];\r\n\tawait fetch(mockLinkSpesa(userId), {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t})\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => jsonToArray(data, month, refundList))\r\n\t\t.catch((error) => console.log(error));\r\n\r\n\treturn refundList;\r\n\t// sortByColumn(columnSort, tableListRimborso);\r\n\t// resetTable();\r\n\t// writeCreateTable(tableListRimborso);\r\n\t// undisableForm();\r\n}\r\n\r\nexport function jsonToArray(obj, month, refundList) {\r\n\tobj.map((value) => {\r\n\t\tObject.keys(value).map((item) => {\r\n\t\t\tif (item != \"id\" && item != \"userId\") {\r\n\t\t\t\tlet tableDate = value[item].dateRefund.match(\"[0-9]{4}[-][0-9]{2}\");\r\n\t\t\t\tif (month == tableDate) {\r\n\t\t\t\t\t// value[item].primaryKey = primaryKey++;\r\n\t\t\t\t\trefundList.push(value[item]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport async function submitMonthMock(rows, userId, yearMonth) {\r\n\tconsole.log(\"%c SUBMIT IS STARTING \", \"background-color:brown;color:white;font-size:16px;\");\r\n\tidArray = await getIdByMonthMock(userId, yearMonth);\r\n\tawait deleteMockByUserId(idArray, userId);\r\n\tidArray = [];\r\n\tawait postTable(rows, userId);\r\n}\r\n\r\nexport async function getIdByMonthMock(userId, yearMonth) {\r\n\tconsole.log(\"%c GETTING ID \", \"background-color:red;color:white;font-size:16px;\");\r\n\r\n\tawait fetch(mockLinkSpesa(userId), {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t})\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => idMonthSelected(data, yearMonth))\r\n\t\t.catch((error) => console.log(error));\r\n\tconsole.log(\"id TO DELETE : \");\r\n\tconsole.log(idArray);\r\n\treturn idArray;\r\n}\r\n\r\nfunction idMonthSelected(obj, yearMonth) {\r\n\tconsole.log(yearMonth);\r\n\tobj.filter((value) => {\r\n\t\tlet tableDate = value[0].dateRefund.match(\"[0-9]{4}[-][0-9]{2}\");\r\n\t\tif (tableDate == yearMonth) {\r\n\t\t\tidArray.push(value.id);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport async function deleteMockByUserId(idArray, userId) {\r\n\tconsole.log(\"%c DELETING \", \"background-color:black;color:white;font-size:16px;\");\r\n\tfor (const element of idArray) {\r\n\t\tawait fetch(mockLinkSpesa(userId) + \"/\" + element, {\r\n\t\t\tmethod: \"DELETE\",\r\n\t\t\theaders: { \"Content-type\": \"application/json\" },\r\n\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((data) => console.log(data));\r\n\t}\r\n}\r\n\r\nexport async function postTable(rows, userId) {\r\n\tlet tableIsEmpty = rows.length == 0;\r\n\tif (!tableIsEmpty) {\r\n\t\tconsole.log(\"%c POSTING \", \"background-color:white;color:black;font-size:16px;\");\r\n\t\tawait fetch(mockLinkSpesa(userId), {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify(rows),\r\n\t\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(\"NUOVO id \" + data.id);\r\n\t\t\t})\r\n\t\t\t.catch((error) => console.log(error));\r\n\t} else {\r\n\t\tconsole.log(\"%c tableIsEmpty\", \"font-size:16px;\");\r\n\t}\r\n\tconsole.log(\"%c SUBMITTING ENDED \", \"background-color:brown;color:white;font-size:16px;\");\r\n}\r\n\r\nexport async function hasRegistered(user) {\r\n\tfoundAccount = { found: false, id: \"\" };\r\n\tawait fetch(mockLink() + \"users\", {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t})\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => checkId(data, user))\r\n\t\t.catch((error) => console.log(error));\r\n\r\n\treturn foundAccount;\r\n}\r\n\r\nfunction checkId(data, user) {\r\n\tdata.map((mock) => {\r\n\t\tif (mock.username === user.username && mock.password === user.password) {\r\n\t\t\tfoundAccount.found = true;\r\n            foundAccount.id = mock.id;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport async function registerNewUser(userData) {\r\n\tconsole.log(\"%c REGISTERING \", \"background-color:grey;color:white;font-size:16px;\");\r\n\r\n\tawait fetch(mockLink() + \"users\", {\r\n\t\tmethod: \"POST\",\r\n\t\tbody: JSON.stringify(userData),\r\n\t\theaders: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n\t})\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\tconsole.log(data);\r\n\t\t\tconsole.log(\"NUOVO id \" + data.id);\r\n\t\t})\r\n\t\t.catch((error) => console.log(error));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}